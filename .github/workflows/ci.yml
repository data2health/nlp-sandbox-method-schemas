name: CI

on:
  schedule:
    - cron: '0 10 * * *' # everyday at 10am
  push:
    branches:
      - main
      - develop
    tags:
      - '*.*.*'
  pull_request:

env:
  node_version: 12.x
  # github.event.repository.clone_url not available for on: schedule
  clone_url: https://github.com/nlpsandbox/nlpsandbox-schemas.git
  # github.event.repository.default_branch not available for on: schedule
  default_branch: develop

jobs:
  configure:
    runs-on: ubuntu-latest
    steps:
    - name: Create configuration
      run: |
        # gh-openapi-docs uses the branch name "undefined" when it does not find
        # the name of the current branch
        BRANCH=undefined
        VERSION=noop
        PUSH=false
        if [ "${{ github.event_name }}" = "schedule" ]; then
          BRANCH=${{ env.default_branch }}
          VERSION=nightly
          PUSH=true
        elif [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ $GITHUB_REF == refs/heads/* ]]; then
          BRANCH=${GITHUB_REF#refs/heads/}
          VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
            VERSION=edge
            PUSH=true
          elif [ "develop" = "$VERSION" ]; then
            # If the branch develop is the default branch, the doc will be pushed
            # to the folder edge but not the folder develop..
            PUSH=true
          fi
        elif [[ $GITHUB_REF == refs/pull/* ]]; then
          VERSION=pr-${{ github.event.number }}
          PUSH=false
        fi
        if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
          MINOR=${VERSION%.*}
          MAJOR=${MINOR%.*}
          PUSH=true
        fi
        echo "branch=${BRANCH}" >> $GITHUB_ENV
        echo "version=${VERSION}" >> $GITHUB_ENV
        echo "version_major=${MAJOR}" >> $GITHUB_ENV
        echo "version_minor=${MINOR}" >> $GITHUB_ENV
        echo "created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
        echo "push=${PUSH}" >> $GITHUB_ENV
        cat $GITHUB_ENV > .GITHUB_ENV

    - name: Upload .GITHUB_ENV
      uses: actions/upload-artifact@v2
      with:
        name: .GITHUB_ENV
        path: .GITHUB_ENV

  lint:
    needs: [configure]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        api:
        - "data-node"
        - "date-annotator"
        - "person-name-annotator"
        - "phi-deidentifier"
        - "physical-address-annotator"
        - "covid-symptom-annotator"
        - "contact-annotator"
        - "id-annotator"
    steps:
    - uses: actions/checkout@v2

    - name: Use Node.js ${{ env.node_version }}
      uses: actions/setup-node@v2.1.5
      with:
        node-version: ${{ env.node_version }}

    - name: Install dependencies
      run: npm ci

    - name: Lint openapi specifications
      run: |
        npm run lint --api=${{ matrix.api }}
        npm run validate --api=${{ matrix.api }}

  build:
    needs: [lint]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        api:
        - "data-node"
        - "date-annotator"
        - "person-name-annotator"
        - "phi-deidentifier"
        - "physical-address-annotator"
        - "covid-symptom-annotator"
        - "contact-annotator"
        - "id-annotator"
    steps:
    - uses: actions/checkout@v2

    - name: Download .GITHUB_ENV
      uses: actions/download-artifact@v2
      with:
        name: .GITHUB_ENV
        path: .GITHUB_ENV

    - name: Display structure of downloaded files
      run: ls -R

    - name: Restore $GITHUB_ENV
      run: export $(grep -v '^#' .GITHUB_ENV | xargs -d '\n')

    - name: Use Node.js ${{ env.node_version }}
      uses: actions/setup-node@v2.1.5
      with:
        node-version: ${{ env.node_version }}

    - name: Install dependencies
      run: npm ci

    - name: Create .spec-docs.json
      run: |
        printf "%s\n" \
        '{' \
        '"apiSpecPath": "openapi/${{ matrix.api }}/openapi.yaml",' \
        '"docsRoot": "docs",' \
        '"defaultBranch": "",' \
        '"branchPathBase": "preview"' \
        '}' | tee -a .spec-docs.json >/dev/null

    - name: Create openapi docs
      run: npx gh-openapi-docs-ts

    - name: Prepare for archiving openapi docs
      run: |
        TARGET_DIR=gh-openapi-docs/${{ matrix.api }}/${{ env.version }}
        mkdir -p ${TARGET_DIR}
        cp -R preview/${{ env.branch }}/* ${TARGET_DIR}

    - name: Archive openapi docs
      uses: actions/upload-artifact@v2
      with:
        name: gh-openapi-docs
        path: gh-openapi-docs

    - name: Add openapi.yaml to openapi-merge individuals
      run: |
        TARGET_DIR=openapi-individuals/openapi/_internal/individuals
        mkdir -p ${TARGET_DIR}
        cp gh-openapi-docs/${{ matrix.api }}/${{ env.version }}/openapi.yaml \
          ${TARGET_DIR}/${{ matrix.api }}.openapi.yaml

    - name: Archive openapi.yaml for openapi-merge
      uses: actions/upload-artifact@v2
      with:
        name: openapi-individuals
        path: openapi-individuals

  build-aggregates:
    needs: [build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        api:
        - "tools"
    steps:
    - uses: actions/checkout@v2

    - name: Download GITHUB_ENV
      uses: actions/download-artifact@v2
      with:
        name: GITHUB_ENV

    - name: Restore $GITHUB_ENV
      run: export $(grep -v '^#' GITHUB_ENV | xargs -d '\n')

    - name: Use Node.js ${{ env.node_version }}
      uses: actions/setup-node@v2.1.5
      with:
        node-version: ${{ env.node_version }}

    - name: Install dependencies
      run: npm ci

    - name: Download openapi-merge individual openapis
      uses: actions/download-artifact@v2
      with:
        name: openapi-individuals
        path: .

    - name: Merge individual openapis
      run: npm run merge:openapi:${{ matrix.api }}

    - name: Create .spec-docs.json
      run: |
        printf "%s\n" \
        '{' \
        '"apiSpecPath": "openapi/_internal/individuals/${{ matrix.api }}/openapi.yaml",' \
        '"docsRoot": "docs",' \
        '"defaultBranch": "",' \
        '"branchPathBase": "preview"' \
        '}' | tee -a .spec-docs.json >/dev/null
        cat .spec-docs.json

    - name: Create openapi docs
      run: npx gh-openapi-docs-ts

    - name: Prepare for archiving openapi docs
      run: |
        TARGET_DIR=gh-openapi-docs/_internal/${{ matrix.api }}/${{ env.version }}
        mkdir -p ${TARGET_DIR}
        cp -R preview/${{ env.branch }}/* ${TARGET_DIR}

    - name: Archive openapi docs
      uses: actions/upload-artifact@v2
      with:
        name: gh-openapi-docs
        path: gh-openapi-docs

  publish:
    needs: [build-aggregates]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Download GITHUB_ENV
      uses: actions/download-artifact@v2
      with:
        name: GITHUB_ENV

    - name: Restore $GITHUB_ENV
      run: export $(grep -v '^#' GITHUB_ENV | xargs -d '\n')

    - name: Download gh-openapi-docs artifacts
      uses: actions/download-artifact@v2
      with:
        name: gh-openapi-docs
        path: .

    - name: List all files
      run: du -a .

    # - name: Commit doc changes
    #   run: |
    #     git clone ${{ env.clone_url }} \
    #       --branch gh-pages --single-branch gh-pages

    #     # Update gh-pages: version specified
    #     TARGET_DIR=gh-pages/${{ matrix.api }}/${{ steps.prep.outputs.version }}
    #     mkdir -p ${TARGET_DIR}
    #     cp -R gh-openapi-docs/${{ steps.prep.outputs.branch }}/* ${TARGET_DIR}

    #     # Update gh-pages: latest, major, and minor versions
    #     if [ ! -z "${{ steps.prep.outputs.version_major }}" ]; then
    #       # Update major version (e.g. "1.2.3" => "1")
    #       TARGET_DIR=gh-pages/${{ matrix.api }}/latest
    #       mkdir -p ${TARGET_DIR}
    #       cp -R gh-openapi-docs/${{ steps.prep.outputs.branch }}/* ${TARGET_DIR}

    #       # Update major version (e.g. "1.2.3" => "1")
    #       TARGET_DIR=gh-pages/${{ matrix.api }}/${{ steps.prep.outputs.version_major }}
    #       mkdir -p ${TARGET_DIR}
    #       cp -R gh-openapi-docs/${{ steps.prep.outputs.branch }}/* ${TARGET_DIR}

    #       # Update minor version (e.g. "1.2.3" => "1.2")
    #       TARGET_DIR=gh-pages/${{ matrix.api }}/${{ steps.prep.outputs.version_minor }}
    #       mkdir -p ${TARGET_DIR}
    #       cp -R gh-openapi-docs/${{ steps.prep.outputs.branch }}/* ${TARGET_DIR}
    #     fi

    #     cd gh-pages
    #     git config --local user.email "action@github.com"
    #     git config --local user.name "GitHub Action"
    #     git add .
    #     git commit -m "Update documentation" -a || true
    #     # The above command will fail if no changes were present, so we ignore
    #     # that.

    # - name: Push changes
    #   if: steps.prep.outputs.push == 'true'
    #   uses: ad-m/github-push-action@master
    #   with:
    #     branch: gh-pages
    #     directory: gh-pages
    #     github_token: ${{ secrets.GITHUB_TOKEN }}
    #     force: true